多态：父类型的引用可以指向子类型的对象。 比如：Parent p=new Child();
不要把函数重载理解成多态。因为多态是一种运行期的行为，不是编译期的行为。


当使用多态方式调用方法的时候，首先检测父类中是否有该方法，如果没有，则编译错误。 如果有，再去调用子类的该同名方法。


实现多态有三个必要条件：继承、重写、向上转型
继承：在多态中必须存在有继承关系的子类和父类
重写：子类对付类中某些方法重新定义，在调用方法时就会调用子类的方法。
向上转型：在多态中需要将子类的引用赋给父类的对象，只有这样该引用才能具备技能调用父类的方法和子类的方法。

有两种形式实现多态。继承和接口
class zilei extends fulei

等子类对继承父类的方法不满意，是可以重写父类继承的方法的，当调用方法时会优先调用子类的方法。
语法规则：a、返回值类型 b、方法名、c、参数类型和个数  都必须和父类继承的方法相同，才叫方法的重写

继承的初始化顺序
1.初始化父类再初始化子类
2.先执行初始化对象中的属性，再执行构造方法中的初始化


final 关键字

可以修饰类、方法、属性、和变量
final修饰类 则该类不允许被继承
final修饰方法，则该方法不允许被覆盖
final修饰属性 则这个属性不能再其他位置修改 包括构造方法中 和main函数中  如果不给 属性初始化 系统不会帮我们自动初始化  那就在构造方法中初始化
final修饰变量   不允许修改，所以被final修饰的变量或者局部变量  就会成为常亮

super关键字
在对象的内部使用  可以代表父类对象
1.访问父类的属性  super.age
2.访问父类的方法   super.eat()






